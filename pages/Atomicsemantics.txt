'''atomic semantics''' is a term which describes a type of guarantee provided by a [[data register]] shared by several [[central processing unit|processors]] in a [[parallel machine]] or in a network of computers working together. atomic semantics are very strong. an atomic register provides strong guarantees even when there is concurrency and failures.  a read/write register r stores a value and is accessed by two basic operations: read and write(v). a read  returns the value stored in r and write(v) changes the value stored in r to v. a register is called atomic if it satisfies the two following properties:  1) each invocation op of a read or write operation:  •must appear as if it were executed at a single point τ(op) in time.  •τ (op) works as follow: τb(op) ≤ τ (op) ≤ τe(op): where τb(op) and τe(op) indicate the time when the operation op begins and ends.  •if op1 ≠ op2, then τ (op1)≠τ (op2)  2) each read operation returns the value written by the last write operation before the read, in the sequence where all operations are ordered by their τ values.  '''atomic/linearizable register:'''  termination: when a node is correct,sooner or later each read and write operation will complete.  '''safety property''' (linearization points for read and write and failed operations):  read operation:it appears as if happened at all nodes at some times between the invocation and response time.  write operation: similar to read operation,it appears as if happened at all nodes at some times between the invocation and response time.  failed operation(the atomic term comes from this notion):it appears as if it is completed at every single node or it never happened at any node.  example : we know that an atomic register is one that is linearizable to a sequential safe register.  [[file:atomic register1.jpg|centre|atomic]]  the following picture shows where we should put the linearization point for each operation:  [[file:atomic register.jpg|center|atomic register]]    an atomic register could be defined for a variable with a single writer but multi- readers(swmr),single-writer/single-reader (swsr),or multi-writer/multi-reader(mwmr). here is an example of a multi-reader multi-writer atomic register which is accessed by three processes (p1,p2,p3).note that r.read() → v means that the corresponding read operation returns v, which is the value of the register. therefore, the following execution of the register r could satisfies the definition of the atomic registers: r.write(1), r.read()→1, r.write(3), r.write(2), r.read()→2, r.read()→2.  [[file:atomic mwmr1.jpg|center|atomic mwmr1]]  ==see also== *[[regular semantics]] *[[safe semantics]]  ==references== * atomic semantics are defined formally in lamport's "on interprocess communication" distributed computing 1, 2 (1986), 77-101. (also appeared as src research report 8).  {{defaultsort:atomic semantics}} [[category:concurrency control]]