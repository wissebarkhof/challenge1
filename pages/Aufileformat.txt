{{no footnotes|date=january 2013}} {{infobox file format | name = au | icon = | logo = | screenshot = | caption = | extension = .au<br />.snd | mime = audio/basic | type code = | uniform type = | magic = .snd | owner = [[sun microsystems]] | type = [[audio file format]], [[container format (digital)|container format]] | container for = [[audio frequency|audio]], most often [[µ-law]] | contained by = | extended from = | extended to = | standard = }} the '''au file format''' is a simple [[audio file format]] introduced by [[sun microsystems]]. the format was common on [[next]] systems and on early web pages. originally it was headerless, being simply 8-bit [[mu-law|µ-law]]-encoded data at an 8000&nbsp;hz sample rate. hardware from other vendors often used sample rates as high as 8192&nbsp;hz, often integer factors of video clock signals. newer files have a header that consists of six [[signedness|unsigned]] [[32-bit]] words, an optional information chunk and then the data (in [[big endian]] format).  although the format now supports many [[digital audio|audio encoding]] formats, it remains associated with the [[mu-law|µ-law]] logarithmic encoding. this encoding was native to the [[sparcstation 1]] hardware, where [[sunos]] exposed the encoding to application programs through the /dev/audio interface. this encoding and interface became a [[de facto]] standard for [[unix]] sound.  ==new format== all fields are stored in [[big-endian]] format, including the sample data. {{clear}} {| class="wikitable" width="100%" ! 32 bit word (unsigned) ! field ! description/content [[hexadecimal]] numbers in [[c (programming language)|c]] notation |- valign = top | 0 | [[magic number (programming)|magic number]] | the value <tt>0x2e736e64</tt> (four ascii characters ".snd") |- valign = top | 1 || data offset | the offset to the data in [[byte]]s, must be divisible by 8. the minimum valid number is 24 (decimal), since this is the header length (six 32-bit words) with no space reserved for extra information (the annotation field). the minimum valid number with an annotation field present is 32 (decimal). |- valign = top | 2 || data size | data size in bytes. if unknown, the value <tt>0xffffffff</tt> should be used. |- valign = top | 3 || encoding || data encoding format: *1 = 8-bit [[g.711]] [[mu-law algorithm|µ-law]] *2 = 8-bit linear [[pulse code modulation|pcm]] *3 = 16-bit linear [[pulse code modulation|pcm]] *4 = 24-bit linear [[pulse code modulation|pcm]] *5 = 32-bit linear [[pulse code modulation|pcm]] *6 = 32-bit [[ieee floating-point standard|ieee floating point]] *7 = 64-bit [[ieee floating-point standard|ieee floating point]] *8 = fragmented sample data *9 = dsp program *10 = 8-bit [[fixed-point arithmetic|fixed point]] *11 = 16-bit [[fixed-point arithmetic|fixed point]] *12 = 24-bit [[fixed-point arithmetic|fixed point]] *13 = 32-bit [[fixed-point arithmetic|fixed point]] *18 = 16-bit linear with emphasis *19 = 16-bit linear compressed *20 = 16-bit linear with emphasis and compression *21 = music kit dsp commands *23 = 4-bit compressed using the [[g.726|itu-t g.721]] [[adpcm]] voice data encoding scheme *24 = [[g.722|itu-t g.722]] [[sub-band adpcm|sb-adpcm]] *25 = [[g.723|itu-t g.723]] 3-bit [[adpcm]] *26 = [[g.723|itu-t g.723]] 5-bit [[adpcm]] *27 = 8-bit [[g.711]] [[a-law algorithm|a-law]] |- valign = top | 4 || sample rate | the number of samples/second, e.g., 8000 |- valign = top | 5 || channels | the number of interleaved channels, e.g., 1 for mono, 2 for stereo; more channels possible, but may not be supported by all readers. |}  the type of encoding depends on the value of the "encoding" field (word 3 of the header). formats 2 through 7 are uncompressed linear [[pulse-code modulation|pcm]], therefore technically [[lossless]] (although not necessarily free of quantisation error, especially in 8-bit form). formats 1 and 27 are [[μ-law algorithm|μ-law]] and [[a-law]], respectively, both [[companding]] logarithmic representations of pcm, and arguably lossy as they pack what would otherwise be almost 16 bits of dynamic range into 8 bits of encoded data, even though this is achieved by an altered dynamic response and no data is actually "thrown away". formats 23 through 26 are adpcm, which is an early form of [[lossy compression]], usually but not always with 4 bits of encoded data per audio sample (for 4:1 efficiency with 16-bit input, or 2:1 with 8-bit; equivalent to e.g. encoding cd quality mp3 at a 352kbit rate using a low quality encoder). several of the others are [[digital signal processing|dsp]] commands or data, designed to be processed by the [[next]] [[music kit]] software.  note: pcm formats are encoded as signed data (as opposed to unsigned).  following the header structure is a variable-length annotation field.  the contents of this field are currently undefined, except that its length must be a multiple of eight bytes and it must be terminated with at least one null (zero) byte. the audio data segment begins on an eight-byte boundary immediately following the annotation field. audio data is encoded in the format identified by the file header. the current implementation supports only a single audio data segment per file. the variable-length annotation field is currently ignored by most audio applications.  == external links == *[http://www.nch.com.au/acm/sample.au sample .au file] *[http://pubs.opengroup.org/external/auformat.html sun .au sound file format] *[https://web.archive.org/web/20121028010008/http://www-mmsp.ece.mcgill.ca/documents/audioformats/au/au.html audio file format specifications]  {{compression formats}}  {{defaultsort:au file format}} [[category:computer file formats]] [[category:container formats]] [[category:audio codecs]]